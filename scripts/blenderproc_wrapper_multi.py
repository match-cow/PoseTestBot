import argparse
import json
import os
import shutil
import subprocess
from typing import List, Tuple


def check_path_exists(path: str, path_description: str) -> bool:
    """Checks if a given path exists.

    Args:
        path: The path to check.
        path_description: A description of the path for error messages.

    Returns:
        True if the path exists, False otherwise.
    """
    if not os.path.exists(path):
        print(f"{path_description} {path} does not exist.")
        return False
    return True


def load_objects_data(objects_json_path: str) -> List[str]:
    """Loads object data from a JSON file.

    Args:
        objects_json_path: The path to the objects.json file.

    Returns:
        A list of object names, or None if the file does not exist.
    """
    if not check_path_exists(objects_json_path, "objects.json file"):
        return None

    with open(objects_json_path, "r") as f:
        objects = json.load(f)
    return objects


def validate_object_files(
    bproc_subfolder: str, objects: List[str]
) -> Tuple[List[str], List[str]]:
    """Validates the existence of object model and object2template files.

    Args:
        bproc_subfolder: The path to the blenderproc subfolder.
        objects: A list of object names.

    Returns:
        A tuple containing lists of object models and object2templates.
    """
    object_models = []
    object2templates = []

    for o in objects:
        object_model = os.path.join(bproc_subfolder, "objects", f"{o}.ply")
        object2template = os.path.join(bproc_subfolder, "objects", f"{o}.npy")

        if not check_path_exists(object_model, "Object model"):
            continue
        if not check_path_exists(object2template, "Object2template"):
            continue

        object_models.append(object_model)
        object2templates.append(object2template)

    return object_models, object2templates


def run_blenderproc(
    bproc_render_script: str,
    camera_poses: str,
    camera_matrix: str,
    bproc_subfolder: str,
) -> None:
    """Runs the blenderproc script with the given parameters.

    Args:
        bproc_render_script: The path to the blenderproc render script.
        camera_poses: The path to the camera poses file.
        camera_matrix: The path to the camera matrix file.
        bproc_subfolder: The path to the blenderproc subfolder.
    """
    command = f"blenderproc run {bproc_render_script} {camera_poses} {camera_matrix} {bproc_subfolder}"
    subprocess.run(command, shell=True, check=True)


def cleanup_output(sensor_folder: str, bproc_subfolder: str) -> None:
    """Cleans up the output generated by blenderproc.

    Moves the mask folder and renames the output folder.

    Args:
        sensor_folder: The path to the sensor folder.
        bproc_subfolder: The path to the blenderproc subfolder.
    """
    bproc_output = os.path.join(bproc_subfolder, "train_pbr/000000")

    # Move mask folder
    mask_source_folder = os.path.join(bproc_output, "mask")
    mask_dest_folder = os.path.join(sensor_folder, "masks")
    shutil.move(mask_source_folder, mask_dest_folder)

    # Rename output folder
    bproc_output_new = os.path.join(bproc_subfolder, "output")
    os.rename(bproc_output, bproc_output_new)

    # Delete train_pbr folder
    os.rmdir(os.path.join(bproc_subfolder, "train_pbr"))


def process_sensor_folder(
    run_name: str, sensor_folder: str, bproc_render_script: str
) -> None:
    """Processes a single sensor folder.

    Args:
        run_name: The name of the run.
        sensor_folder: The path to the sensor folder.
        bproc_render_script: The path to the blenderproc render script.
    """
    bproc_subfolder = os.path.join(sensor_folder, "blenderproc")

    if not check_path_exists(bproc_subfolder, "Blenderproc subfolder"):
        return

    objects = load_objects_data(os.path.join(bproc_subfolder, "objects.json"))
    if objects is None:
        return

    object_models, object2templates = validate_object_files(bproc_subfolder, objects)
    if not object_models or not object2templates:
        return

    camera_matrix = os.path.join(bproc_subfolder, "camera_matrix.npy")
    camera_poses = os.path.join(bproc_subfolder, "camera_poses.npy")

    run_blenderproc(bproc_render_script, camera_poses, camera_matrix, bproc_subfolder)

    cleanup_output(sensor_folder, bproc_subfolder)


def main() -> None:
    """Main function to parse arguments and process sensor folders."""
    parser = argparse.ArgumentParser(
        description="Run blenderproc on multiple sensor folders."
    )
    parser.add_argument("input_folder", help="Path to the input folder")
    parser.add_argument(
        "bproc_render_script", help="Path to the blenderproc render script"
    )
    parser.add_argument(
        "--run_level",
        action="store_true",
        help="Choose if wrapper is for run level above object level",
    )
    args = parser.parse_args()

    input_folder = args.input_folder
    bproc_render_script = args.bproc_render_script
    run_level = args.run_level

    if not check_path_exists(input_folder, "Input folder"):
        exit()

    if run_level:
        object_folders = [f.path for f in os.scandir(input_folder) if f.is_dir()]
        sensor_folders = []
        for object_folder in object_folders:
            run_name = os.path.basename(input_folder).split("-")[0]
            sensor_folders.extend(
                [[run_name, f.path] for f in os.scandir(object_folder) if f.is_dir()]
            )
    else:
        run_name = os.path.basename(input_folder).split("-")[0]
        sensor_folders = [
            [run_name, f.path] for f in os.scandir(input_folder) if f.is_dir()
        ]

    for run_name, sensor_folder in sensor_folders:
        process_sensor_folder(run_name, sensor_folder, bproc_render_script)


if __name__ == "__main__":
    main()
